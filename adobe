MINIMUM DISTINCT NUMBERS

class Solution{
    static int mindistinct(int[] arr,int n,int k){
        Map<Integer, 
        Integer> count = new HashMap<Integer,
                                     Integer>();
    for (int i = 0; i < n; i++)
    count.put(arr[i],count.get(arr[i], 0) + 1);
    int[] arr = new int[n + 1];
    for(Integer i : count.values())
    {
        arr[i]++;
   }
    int ans = count.size();
    for(int i = 1; i <= n; i++) 
    {
        int temp = arr[i];
        if (temp == 0)
            continue;
        int t = Math.min(temp, k / i);
        ans -= t;
        k -= i * t;
    }
    return ans;
    } 
}



BOOLEAN MATRIX

class Solution
{
    void booleanMatrix(int matrix[][])
    {
        int r = matrix.length;
        int c = matrix[0].length;
        int row[] = new int[r];
        int col[] = new int[c];        
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(matrix[i][j] == 1){
                    row[i] = 1;
                    col[j] = 1;
              }}}
        for(int i =0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(row[i] == 1 || col[j] == 1){
                    matrix[i][j] = 1;
                }}}
                }
}
